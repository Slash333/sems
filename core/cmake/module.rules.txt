# A place for common parts of SEMS modules rules
#
# We adding sems_ prefix to the internal name of the library to avoid nasty
# issue then this name is equals to external library, our module links to.
# E.g. the issue, then speex module should be linked to -lspeex

INCLUDE(${SEMS_CMAKE_DIR}/doc.rules.txt)
INCLUDE(${SEMS_CMAKE_DIR}/config.rules.txt)
INCLUDE(${SEMS_CMAKE_DIR}/audio.rules.txt)

ADD_LIBRARY(sems_${sems_module_name} MODULE ${${sems_module_name}_SRCS})

IF(APPLE)
	SET(CMAKE_SHARED_MODULE_CREATE_CXX_FLAGS
		"${CMAKE_SHARED_MODULE_CREATE_CXX_FLAGS} -flat_namespace -undefined suppress")
	SET(CMAKE_SHARED_MODULE_CREATE_C_FLAGS
		"${CMAKE_SHARED_MODULE_CREATE_C_FLAGS} -flat_namespace -undefined suppress")
ENDIF(APPLE)

IF(EXISTS ${CMAKE_SOURCE_DIR}/.git)
    FIND_PACKAGE(Git)
    IF(GIT_FOUND)
        EXECUTE_PROCESS(
            COMMAND ${GIT_EXECUTABLE} "describe" "--tags"
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            OUTPUT_VARIABLE TAG_VERSION
            OUTPUT_STRIP_TRAILING_WHITESPACE
        )
        MESSAGE(STATUS "version from git tags: " ${TAG_VERSION})

        EXECUTE_PROCESS(  COMMAND ${GIT_EXECUTABLE} rev-parse HEAD WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE "COMMIT_HASH" ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
        EXECUTE_PROCESS(  COMMAND ${GIT_EXECUTABLE} describe HEAD --tags WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE "GIT_DESCRIBE" ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
        SET(BUILD_VERSION ${GIT_DESCRIBE})
        SET(BUILD_COMMIT ${COMMIT_HASH})

        STRING(REGEX REPLACE "[\\.]" ";" TAG_VERSION_LIST ${TAG_VERSION})
        LIST(GET TAG_VERSION_LIST 0 YETI_MAJOR_VERSION)
        LIST(GET TAG_VERSION_LIST 1 YETI_MINOR_VERSION)
        LIST(GET TAG_VERSION_LIST 2 YETI_PATCH_VERSION)
        SET(MODULE_VERSION
            "${YETI_MAJOR_VERSION}.${YETI_MINOR_VERSION}.${YETI_PATCH_VERSION}-${YETI_BUILD_VERSION}")
    ELSE(GIT_FOUND)
        MESSAGE(FATAL_ERROR "can't find Git package")
    ENDIF(GIT_FOUND)
ELSE(EXISTS ${CMAKE_SOURCE_DIR}/.git)
    MESSAGE(FATAL_ERROR "git repository required")
ENDIF(EXISTS ${CMAKE_SOURCE_DIR}/.git)

MESSAGE(STATUS "set version of ${sems_module_name} - ${MODULE_VERSION}")
ADD_DEFINITIONS(-DMOD_NAME='\"${sems_module_name}\"' -DMODULE_VERSION='\"${MODULE_VERSION}\"')

# all modules should be linked against ${CMAKE_DL_LIBS} at least
# and with additional ${sems_module_libs} if they exists
TARGET_LINK_LIBRARIES(sems_${sems_module_name} ${CMAKE_DL_LIBS} ${sems_module_libs})
IF(NOT ${sems_module_dependency})
    MESSAGE(STATUS "sems_${sems_module_name} dependency: ${sems_module_dependency}")
    ADD_DEPENDENCIES(sems_${sems_module_name} ${sems_module_dependency})
ENDIF(NOT ${sems_module_dependency})

SET_TARGET_PROPERTIES(sems_${sems_module_name} PROPERTIES OUTPUT_NAME ${sems_module_name})
SET_TARGET_PROPERTIES(sems_${sems_module_name} PROPERTIES PREFIX "")

INSTALL(
	TARGETS sems_${sems_module_name}
	LIBRARY DESTINATION ${SEMS_EXEC_PREFIX}/${SEMS_LIBDIR}/sems/plug-in/
)

IF(NOT DEFINED ${sems_module_name}_docs)
	IF(EXISTS ${CMAKE_SOURCE_DIR}/doc/Readme.${sems_module_name}.txt)
		SET(${sems_module_name}_docs ${CMAKE_SOURCE_DIR}/doc/Readme.${sems_module_name}.txt)
	ENDIF(EXISTS ${CMAKE_SOURCE_DIR}/doc/Readme.${sems_module_name}.txt)
ENDIF(NOT DEFINED ${sems_module_name}_docs)

SEMS_INSTALL_DOCS("${${sems_module_name}_docs}" "${${sems_module_name}_doc_dirs}")

IF(NOT DEFINED ${sems_module_name}_config_files)
	SEMS_INSTALL_CONFIGS("${sems_module_name}")
ELSE(NOT DEFINED ${sems_module_name}_config_files)
	SEMS_INSTALL_CONFIGS("${${sems_module_name}_config_files}")
ENDIF(NOT DEFINED ${sems_module_name}_config_files)

IF(DEFINED ${sems_module_name}_config_dist_files)
	SEMS_INSTALL_DIST_CONFIGS("${${sems_module_name}_config_dist_files}")
ENDIF(DEFINED ${sems_module_name}_config_dist_files)


IF(DEFINED ${sems_module_name}_audio_files)
	SEMS_INSTALL_AUDIO("${sems_module_name}" "${${sems_module_name}_audio_files}")
ENDIF(DEFINED ${sems_module_name}_audio_files)
