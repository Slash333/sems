# A place for common parts of SEMS modules rules
#
# We adding sems_ prefix to the internal name of the library to avoid nasty
# issue then this name is equals to external library, our module links to.
# E.g. the issue, then speex module should be linked to -lspeex

INCLUDE(${CMAKE_SOURCE_DIR}/cmake/doc.rules.txt)
INCLUDE(${CMAKE_SOURCE_DIR}/cmake/config.rules.txt)
INCLUDE(${CMAKE_SOURCE_DIR}/cmake/audio.rules.txt)

INCLUDE_DIRECTORIES(${SPANDSP_BUNDLED_INCLUDE_DIRS})

IF(SEMS_USE_AMARG_STAT)
    add_definitions("-DUSE_AMARG_STATISTICS")
ENDIF(SEMS_USE_AMARG_STAT)

add_definitions("-fmacro-prefix-map=${CMAKE_CURRENT_SOURCE_DIR}/=${sems_module_name}:")

IF(${sems_module_name}_UNIT_SRCS)
    MESSAGE(STATUS "using unit tests for ${sems_module_name}")

    ADD_LIBRARY(sems_${sems_module_name}_obj OBJECT ${${sems_module_name}_SRCS})

    ADD_LIBRARY(sems_${sems_module_name} MODULE)
    target_sources(sems_${sems_module_name} PRIVATE $<TARGET_OBJECTS:sems_${sems_module_name}_obj>)

    ADD_LIBRARY(sems_${sems_module_name}_unit MODULE ${${sems_module_name}_UNIT_SRCS})
    target_sources(sems_${sems_module_name}_unit PRIVATE $<TARGET_OBJECTS:sems_${sems_module_name}_obj>)

ELSE(${sems_module_name}_UNIT_SRCS)
    ADD_LIBRARY(sems_${sems_module_name} MODULE ${${sems_module_name}_SRCS})
ENDIF(${sems_module_name}_UNIT_SRCS)

IF(APPLE)
	SET(CMAKE_SHARED_MODULE_CREATE_CXX_FLAGS
		"${CMAKE_SHARED_MODULE_CREATE_CXX_FLAGS} -flat_namespace -undefined suppress")
	SET(CMAKE_SHARED_MODULE_CREATE_C_FLAGS
		"${CMAKE_SHARED_MODULE_CREATE_C_FLAGS} -flat_namespace -undefined suppress")
ENDIF(APPLE)

SET(MODULE_VERSION "${SEMS_VERSION}")
MESSAGE(STATUS "set version of ${sems_module_name} - ${MODULE_VERSION}")

ADD_DEFINITIONS(-DMOD_NAME="${sems_module_name}"  -DMODULE_VERSION="${MODULE_VERSION}")

IF(NOT ${sems_module_dependency})
    MESSAGE(STATUS "sems_${sems_module_name} dependency: ${sems_module_dependency}")
    ADD_DEPENDENCIES(sems_${sems_module_name} ${sems_module_dependency})

    IF(${sems_module_name}_UNIT_SRCS)
        ADD_DEPENDENCIES(sems_${sems_module_name}_unit ${sems_module_dependency})
    ENDIF(${sems_module_name}_UNIT_SRCS)
ENDIF(NOT ${sems_module_dependency})

# all modules should be linked against ${CMAKE_DL_LIBS} at least
# and with additional ${sems_module_libs} if they exists
TARGET_LINK_LIBRARIES(sems_${sems_module_name} ${CMAKE_DL_LIBS} ${sems_module_libs})
IF(${sems_module_name}_UNIT_SRCS)
    TARGET_LINK_LIBRARIES(sems_${sems_module_name}_unit ${CMAKE_DL_LIBS} ${sems_module_libs})
ENDIF(${sems_module_name}_UNIT_SRCS)

SET_TARGET_PROPERTIES(sems_${sems_module_name} PROPERTIES OUTPUT_NAME ${sems_module_name})
SET_TARGET_PROPERTIES(sems_${sems_module_name} PROPERTIES PREFIX "")

IF(${sems_module_name}_UNIT_SRCS)
    SET_TARGET_PROPERTIES(sems_${sems_module_name}_unit PROPERTIES OUTPUT_NAME ${sems_module_name}_unit)
    SET_TARGET_PROPERTIES(sems_${sems_module_name}_unit PROPERTIES PREFIX "")
ENDIF(${sems_module_name}_UNIT_SRCS)

INSTALL(
	TARGETS sems_${sems_module_name}
	LIBRARY DESTINATION ${SEMS_EXEC_PREFIX}/${SEMS_LIBDIR}/sems/plug-in/
)

IF(NOT DEFINED ${sems_module_name}_docs)
	IF(EXISTS ${CMAKE_SOURCE_DIR}/doc/Readme.${sems_module_name}.txt)
		SET(${sems_module_name}_docs ${CMAKE_SOURCE_DIR}/doc/Readme.${sems_module_name}.txt)
	ENDIF(EXISTS ${CMAKE_SOURCE_DIR}/doc/Readme.${sems_module_name}.txt)
ENDIF(NOT DEFINED ${sems_module_name}_docs)

SEMS_INSTALL_DOCS("${${sems_module_name}_docs}" "${${sems_module_name}_doc_dirs}")

IF(NOT DEFINED ${sems_module_name}_config_files)
	SEMS_INSTALL_CONFIGS("${sems_module_name}")
ELSE(NOT DEFINED ${sems_module_name}_config_files)
	SEMS_INSTALL_CONFIGS("${${sems_module_name}_config_files}")
ENDIF(NOT DEFINED ${sems_module_name}_config_files)

IF(DEFINED ${sems_module_name}_config_dist_files)
	SEMS_INSTALL_DIST_CONFIGS("${${sems_module_name}_config_dist_files}")
ENDIF(DEFINED ${sems_module_name}_config_dist_files)


IF(DEFINED ${sems_module_name}_audio_files)
	SEMS_INSTALL_AUDIO("${sems_module_name}" "${${sems_module_name}_audio_files}")
ENDIF(DEFINED ${sems_module_name}_audio_files)
